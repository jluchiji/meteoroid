//////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                          //
// Meteoroid asset bunde (module, app etc.) builder.                                        //
// ---------------------------------------------------------------------------------------- //
// Contains logic that builds the source directory into a module bundle.                    //
//                                                                                          //
//////////////////////////////////////////////////////////////////////////////////////////////
_     = require('underscore');
fs    = require('fs');
path  = require('path');
chalk = require('chalk');

//////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                          //
// File                                                                                     //
//                                                                                          //
//////////////////////////////////////////////////////////////////////////////////////////////
File = function (src, type, name) {

  // Assign variables
  this.src = src;
  this.type = type; // 'file' | 'text'

  // Set up display name
  if (type === 'file') { this.name = path.basename(src); }
  else if (type === 'text') { this.name = _.isUndefined(name) ? 'Untitled' : name; }
};

File.prototype.get = function () {
  if (this.type === 'text') {
    return this.src;
  } else if (this.type === 'file') {
    return fs.readFileSync(this.src, {encoding: 'utf8'});
  }
};

//////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                          //
// Bundler                                                                                  //
//                                                                                          //
//////////////////////////////////////////////////////////////////////////////////////////////
Bundler = function (info) {

  // Get the root folder of the module source
  this.root = path.dirname(info);

  // Load the configuration file
  this.info = {
    use: [],
    files: [],
    export: []
  };
  _.extend(this.info, JSON.parse(fs.readFileSync(info, {encoding: 'utf8'})));

  // Bundle contents
  this.sections = { };

  // File type handlers
  this.handlers = {
    '.js': require('./handlers/javascript.js')
  };

  // Builders
  this.builders = [
    // Default Javascript bundler
    function (output, options) {
      /* Utility methods */
      // Repeats the character the specified number of times.
      // Returns the resulting string.
      var repeat = function (length, char) {
        return new Array(length < 0 ? 0 : length + 1).join(char);
      };
      // Pads the string with spaces and adds a terminating character.
      // Returns the padded string.
      var pad = function (str, lineNum) {
        return str + repeat(opt.codeWidth - str.length - 2, ' ') + '//' +
          (_.isUndefined(lineNum) ? '' : ' ' + String(lineNum));
      };
      // Creates a 'boxed' comment text
      // Returns the resulting string.
      var boxComment = function (str) {
        result = [];

        // Top border of the box
        result.push(repeat(opt.codeWidth, '/'));
        result.push(pad('//'));
        // Actual text to include
        var lines = str.split('\n');
        for (var i in lines) {
          result.push(pad('// ' + lines[i]));
        }
        // Bottom border of the box
        result.push(pad('//'));
        result.push(repeat(opt.codeWidth, '/'));

        return result.join('\n');
      };

      /* Build output */
      var codegen = [];

      // Generate the js file head
      codegen.push(boxComment('This file is auto-generated by Meteoroid Bundler.'));
      codegen.push(repeat(6, '\n'));

      // Import Meteoroid if this is not meteoroid
      if (this.info.name !== 'meteoroid:core') {
        codegen.push('// Import Meteoroid module loader');
        codegen.push('Meteoroid = require(\'../meteoroid/core.js\').Meteoroid;\n\n');
      }

      // Import dependencies
      for (var i in this.info.use) {
        codegen.push('Meteoroid.load(this, \''  + this.info.use[i] + '\');')
      }
      codegen.push('\n\n');

      //

    }
  ]
};

// Adds a file path to the bundler processing queue.
Bundler.prototype.addFile = function (path) {
  this.files.push(path);
};
// Adds content to the end of the specified bundle section.
Bundler.prototype.append = function (section, content) {
  // Create an empty section if it's not there
  if (_.isUndefined(this.sections[section])) {
    this.sections[section] = [];
  }
  // Push content to the end
  this.sections[section].push(content);
};
// Launches bundler processing via file handlers snf builders
// All builders will get the options object as their argument.
Bundler.prototype.build = function (output, options) {

  // Make sure that we have the output
  if (_.isUndefined(output)) {
    throw 'Builder.build(): output must be specified!';
  }

  // Options ?

  // Start processing
  for (var i in this.info.files) {
    var ext = path.extname(this.info.files[i]),
        resolved = path.resolve(this.root, this.info.files[i]);

    // If there is a processor, get it
    if (this.handlers[ext]) {
      this.handlers[ext].call(this, new File(resolved, 'file'));
    } else { // If there is no processor for this file, it is treated like an asset
      this.append('assets', resolved);
    }

    // Output using builders

  }

};


// Exports
module.exports = Bundler;
