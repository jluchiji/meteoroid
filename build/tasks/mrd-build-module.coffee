# Imports
_ = require 'underscore'
path = require 'path'
fs = require 'fs'
chalk = require 'chalk'

# 'Constants'
codeWidth = 94

# Code generation
codegen =
  #fence: padString codeWidth, '/'
  fence: '//////////////////////////////////////////////////////////////////////////////////////////////'

# Utility functions
padString = (len, char) ->
  w = len - 1
  w = 0 if w < 0
  return new Array(w).join(char)

finishLine = (line, index) ->
  line ?= ''
  return line + padString(codeWidth - line.length, ' ') + '//' +
    (if _.isUndefined(index) then '' else ' ' + (index + 1))

fencedText = (text) ->
  result = [ ]
  result.push codegen.fence
  result.push '//' + padString(codeWidth - 2, ' ') + '//'
  # Write all lines
  for line in text.split('\n')
    result.push finishLine('// ' + line)
  result.push '//' + padString(codeWidth - 2, ' ') + '//'
  result.push codegen.fence
  return result

fencedCode = (code) ->
  result = [ ]
  result.push finishLine ''
  for line, i in code.split('\n')
    result.push finishLine(line, i)
  result.push finishLine ''
  result.push codegen.fence
  return result

module.exports = (grunt) ->

  grunt.registerMultiTask 'mrd-build-module', 'Builds Meteoroid modules.', ->

    # Function to compile the module into its final form
    buildModule = (dir, output) ->
      # Read module info
      info = grunt.file.readJSON path.join dir, 'module.json'
      # Log the package name so that we can see the progress
      grunt.log.write 'Building ' + chalk.red(info.name) + '...'
      # Generated code goes here
      generated = []
      # Push comments
      generated.push fencedText '''
      This file was automatically generated by the Meteoroid.
      The original source is in the corresponding module directory.
      '''
      generated.push padString 6, '\n'

      # Load Meteoroid tools
      if (not info['no-meteoroid'])

        generated.push fencedText 'Import Meteoroid package loader'
        generated.push 'Meteoroid = require(\'../meteoroid/core.js\').Meteoroid;'
        generated.push padString 6, '\n'

        # Load dependencies
        generated.push fencedText 'Import dependencies'

        # Always load meteoroid:core module
        generated.push 'Meteoroid.load(this, \'meteoroid:core\');'
        for dep in (info.use ? [ ]) # Allow undefined dependencies
          generated.push 'Meteoroid.load(this, \''  + dep + '\');'
        generated.push padString 6, '\n'

      # Fail if no-meteoroid but there are deps
      if ((info.use and info.use.length isnt 0) and info['no-meteoroid'])
        grunt.fail 'Cannot have \'no-meteoroid\' flag for a module with dependencies!'

      # Load module files
      for file in (info.files ? [ ]) # Allow undefined files
        generated.push '(function () {\n'
        generated.push fencedText file
        generated.push fencedCode grunt.file.read path.join(dir, file)
        generated.push '\n}).call(this);'
        generated.push padString 6, '\n'


      # Handle exports
      generated.push fencedText 'Handle module exports'
      for exp in (info.export ? [ ])
        generated.push 'module.exports[\'' + exp + '\'] = ' + exp + ';';
      # Write the resulting file
      grunt.file.write output + '.js', _.flatten(generated).join '\n'
      # Log build completion
      #grunt.log.writeln chalk.green(output + '.js')
      grunt.log.writeln chalk.green('OK!')

    # Compile each module
    @files.forEach (filePair) ->
      filePair.src.forEach (src) ->
        buildModule src, filePair.dest
